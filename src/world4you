#!/usr/bin/env python3

from World4YouApi import MyWorld4You
import getpass
import sys
import argparse


def info(*cmd_args, **kwargs):
    if v > 0:
        print(*cmd_args, **kwargs, file=sys.stderr)
        sys.stderr.flush()


def error(*cmd_args, **kwargs):
    print(*cmd_args, **kwargs, file=sys.stderr)
    sys.stderr.flush()


def add(record_name: str = None, record_type: str = None, record_value: str = None, *cmd_args):
    if not record_name or not record_type or not record_value or len(cmd_args) != 0:
        error('usage: world4you add <fqdn> <dns-type> <value>')
        return False
    return api.add_resource_record(record_type, record_name, record_value)


def update(record_name: str = None, record_type: str = None, record_value_old: str = None, record_value_new: str = None,
           *cmd_args):
    if record_value_new is None:
        if record_value_old is None:
            record_value_new = record_type
            record_type = None
        else:
            record_value_new = record_value_old
            record_value_old = None
    if not record_name or not record_value_new or len(cmd_args) != 0:
        error('usage: word4you update <fqdn> [<dns-type> [<old-value>]] <new-value>')
        return False
    try:
        rr = api.get_resource_record(fqdn=record_name, rr_type=record_type, value=record_value_old)
    except KeyError:
        error('unable to find resource record')
        return False
    return api.update_resource_record(rr, new_value=record_value_new)


def alter(record_name: str = None, record_type_old: str = None, record_value_old: str = None,
          record_type_new: str = None, record_value_new: str = None, *cmd_args):
    if not record_name or not record_type_old or not record_value_old or record_type_new or len(cmd_args) != 0:
        error('usage: world4you alter <fqdn> <old-dns-type> <old-value> <new-dns-type> [<new-value>]')
        return False
    try:
        rr = api.get_resource_record(record_name, record_type_old, record_value_old)
    except KeyError:
        error('unable to find resource record')
        return False
    return api.update_resource_record(rr, new_type=record_type_new, new_value=record_value_new)


def delete(record_name: str = None, record_type: str = None, record_value: str = None, *cmd_args):
    if not record_name or len(cmd_args) != 0:
        error('usage: world4you delete <fqdn> [<dns-type> [<value>]]')
        return False
    try:
        rr = api.get_resource_record(record_name, record_type, record_value)
    except KeyError:
        error('unable to find resource record')
        return False
    return api.delete_resource_record(rr)


def table(*cmd_args):
    if not (len(cmd_args) == 0 or (len(cmd_args) == 1 and cmd_args[0] == 'full')):
        error('usage: world4you table [full]')
        return False

    len_fqdn, len_value = 0, 0
    for p in api.packages:
        for rr in p.resource_records:
            if len(rr.fqdn) > len_fqdn:
                len_fqdn = len(rr.fqdn)
            if len(rr.value) > len_value:
                len_value = len(rr.value)

    len_val_col = min(len_value, 72)
    if 'full' not in cmd_args:
        len_value = len_val_col

    print(f'┏━{"":━<{len_fqdn}s}━┯━{"":━<8s}━┯━{"":━<{len_val_col}s}━┓')
    print(f'┃ {"Name":^{len_fqdn}s} │ {"Type":^8s} │ {"Value":^{len_val_col}s} ┃')
    print(f'┣━{"":━<{len_fqdn}s}━┿━{"":━<8s}━┿━{"":━<{len_val_col}s}━┫')

    first = True
    for p in api.packages:
        for rr in p.resource_records:
            if not first:
                print(f'┠─{"":─<{len_fqdn}s}─┼─{"":─<8s}─┼─{"":─<{len_val_col}s}─┨')
            values = [rr.value[start:start + len_value] for start in range(0, len(rr.value), len_value)]
            align = '>' if len(values) == 1 else '<'
            print(f'┃ {rr.fqdn:>{len_fqdn}s} │ {rr.type:^8s} │ {values[0]:{align}{len_val_col}s} ┃')
            for v in values[1:]:
                print(f'┃ {"":<{len_fqdn}s} │ {"":<8s} │ {v:{align}{len_val_col}s} ┃')
            first = False

    print(f'┗━{"":━<{len_fqdn}s}━┷━{"":━<8s}━┷━{"":━<{len_val_col}s}━┛')
    return True


def csv(*cmd_args):
    if len(cmd_args) != 0:
        error('usage: world4you csv')
        return False
    for p in api.packages:
        for rr in p.resource_records:
            print(f'{rr.fqdn:s},{rr.type:s},\"{rr.value:s}\"')
    return True


def interactive():
    while True:
        print('> ', file=sys.stderr, end='')
        line = input()
        cmd_args = line.split(' ')
        cmd = cmd_args.pop(0)
        try:
            if cmd == 'add':
                add(*cmd_args)
            elif cmd == 'update':
                update(*cmd_args)
            elif cmd == 'alter':
                alter(*cmd_args)
            elif cmd == 'delete':
                delete(*cmd_args)
            elif cmd == 'table' or cmd == 'list':
                table(*cmd_args)
            elif cmd == 'csv':
                csv(*cmd_args)
            elif cmd == 'reload':
                if len(cmd_args) != 0:
                    error("usage: world4you reload")
                else:
                    info('Retrieving DNS entries...', end='')
                    api.load_packages()
                    info('\rSuccessfully retrieved DNS entries')
            elif cmd == 'exit' or cmd == 'quit':
                if len(cmd_args) != 0:
                    error("usage: world4you " + cmd)
                error("Goodbye!")
                exit(0)
            elif cmd == 'help':
                if len(cmd_args) != 0:
                    error("usage: help")
                else:
                    error("Commands: ")
                    error("  help")
                    error("  list / table [full]")
                    error("  reload")
                    error("  exit / quit")
                    error("  add <fqdn> <dns-type> <value>")
                    error("  update <fqdn> [<dns-type> [<old-value>]] <new-value>")
                    error("  alter <fqdn> <old-dns-type> <old-value> <new-dns-type> [<new-value>]")
                    error("  delete <fqdn> [<dns-type> [<value>]]")
            else:
                error("unknown action. Type 'help' for help")
        except ConnectionError as e:
            error(str(e))
        except IndexError as e:
            error("unable to find resource record")
        except (KeyError, RuntimeError) as e:
            error(str(e))


if __name__ == '__main__':
    parser = argparse.ArgumentParser(prog='world4you', description='An API for World4You DNS Services')
    parser.add_argument('-i', '--interactive', action='store_true',
                        help='Activate interactive mode')
    parser.add_argument('-q', '--quiet', action='store_true',
                        help='Do not output log messages')
    parser.add_argument('-u', '--username', metavar='username', type=str, required=True,
                        help='Specify the username to be used')
    parser.add_argument('-p', '--password', metavar='pwd', type=str,
                        help='Specify the password to be used')
    parser.add_argument('-P', '--password-file', metavar='file', type=str,
                        help='Specify the password file to be read the password from')
    parser.add_argument('action', metavar='action', type=str, nargs='?',
                        choices=['add', 'update', 'alter', 'delete', 'table', 'csv'],
                        help='The action to be performed')
    parser.add_argument('arg', metavar='arg', nargs='*', type=str,
                        help='Args for the specified action')
    args = parser.parse_args()

    v = 1
    if args.quiet:
        v = 0

    username = args.username
    if args.password:
        password = args.password
    elif args.password_file:
        file = open(args.password_file)
        password = file.readline().strip()
        file.close()
    else:
        password = getpass.getpass('Password: ', stream=sys.stderr)

    api = MyWorld4You()

    try:
        info('Logging in...', end='')
        if api.login(username, password):
            info('\rSuccessfully logged in')
        else:
            error('Invalid credentials')
            exit(5)
        info('')
    except ConnectionError as e:
        error(f'\r{e}')
        exit(5)

    try:
        if args.interactive:
            interactive()
        elif args.action == 'add':
            if not add(*args.arg):
                exit(1)
        elif args.action == 'update':
            if not update(*args.arg):
                exit(1)
        elif args.action == 'alter':
            if not alter(*args.arg):
                exit(1)
        elif args.action == 'delete':
            if not delete(*args.arg):
                exit(1)
        elif args.action == 'table':
            if not table(*args.arg):
                exit(1)
        elif args.action == 'csv':
            if not csv(*args.arg):
                exit(1)
        else:
            print("invalid action")
            exit(255)
    except ConnectionError as e:
        error(str(e))
        exit(2)
    except IndexError as e:
        error("unable to find resource record")
        exit(3)
    except (KeyError, RuntimeError) as e:
        error(str(e))
        exit(3)
    exit(0)
